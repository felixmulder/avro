cabal-version: 2.4

name:                   avro
version:                0.5.2.0
synopsis:               Avro serialization support for Haskell
description:            Avro serialization and deserialization support for Haskell
category:               Data
homepage:               https://github.com/haskell-works/avro#readme
bug-reports:            https://github.com/haskell-works/avro/issues
author:                 Thomas M. DuBuisson
maintainer:             Alexey Raga <alexey.raga@gmail.com>
license:                BSD-3-Clause
license-file:           LICENSE
tested-with:            GHC == 8.10.1, GHC == 8.8.3, GHC == 8.6.5
build-type:             Simple
extra-source-files:     README.md
                        ChangeLog.md
                        test/data/enums.avsc
                        test/data/internal-bindings.avsc
                        test/data/karma.avsc
                        test/data/logical.avsc
                        test/data/maybe.avsc
                        test/data/record.avsc
                        test/data/reused.avsc
                        test/data/small.avsc
                        test/data/unions-no-namespace.avsc
                        test/data/unions.avsc
                        test/data/enums-object.json
                        test/data/namespace-inference.json
                        test/data/null-namespace.json
                        test/data/unions-object-a.json
                        test/data/unions-object-b.json
                        test/data/overlay/composite.avsc
                        test/data/overlay/expectation.avsc
                        test/data/overlay/primitives.avsc
                        test/data/fixed-types.avsc

source-repository head
  type: git
  location: https://github.com/haskell-works/avro

flag dev
  description: Use development GHC flags
  manual: True
  default: False

common base                     { build-depends: base                     >= 4          && < 5      }

common aeson                    { build-depends: aeson                                              }
common array                    { build-depends: array                                              }
common base16-bytestring        { build-depends: base16-bytestring                                  }
common bifunctors               { build-depends: bifunctors                                         }
common big-decimal              { build-depends: HasBigDecimal                                      }
common binary                   { build-depends: binary                                             }
common bytestring               { build-depends: bytestring                                         }
common containers               { build-depends: containers                                         }
common data-binary-ieee754      { build-depends: data-binary-ieee754                                }
common deepseq                  { build-depends: deepseq                                            }
common fail                     { build-depends: fail                                               }
common hashable                 { build-depends: hashable                                           }
common mtl                      { build-depends: mtl                                                }
common raw-strings-qq           { build-depends: raw-strings-qq                                     }
common scientific               { build-depends: scientific                                         }
common semigroups               { build-depends: semigroups                                         }
common tagged                   { build-depends: tagged                                             }
common text                     { build-depends: text                     >= 1.2.3      && < 1.3    }
common time                     { build-depends: time                                               }
common template-haskell         { build-depends: template-haskell         >= 2.4        && < 3      }
common tf-random                { build-depends: tf-random                                          }
common unordered-containers     { build-depends: unordered-containers                               }
common uuid                     { build-depends: uuid                                               }
common vector                   { build-depends: vector                                             }
common zlib                     { build-depends: zlib                                               }

common config
  default-language:     Haskell2010
  if flag(dev)
    ghc-options:        -Wall -Werror

library
  import:               base
                      , aeson
                      , array
                      , base16-bytestring
                      , bifunctors
                      , big-decimal
                      , binary
                      , bytestring
                      , containers
                      , config
                      , data-binary-ieee754
                      , deepseq
                      , fail
                      , hashable
                      , mtl
                      , scientific
                      , semigroups
                      , tagged
                      , text
                      , time
                      , tf-random
                      , unordered-containers
                      , uuid
                      , vector
                      , zlib
                      , template-haskell
                      , raw-strings-qq
  exposed-modules:      Data.Avro
                        Data.Avro.Codec
                        Data.Avro.Deriving
                        Data.Avro.Deriving.Lift
                        Data.Avro.Deriving.NormSchema
                        Data.Avro.EitherN
                        Data.Avro.Encoding.FromAvro
                        Data.Avro.Encoding.ToAvro
                        Data.Avro.HasAvroSchema
                        Data.Avro.Internal.Container
                        Data.Avro.Internal.DecodeRaw
                        Data.Avro.Internal.EncodeRaw
                        Data.Avro.Internal.Get
                        Data.Avro.Internal.Time
                        Data.Avro.Internal.Zag
                        Data.Avro.Internal.Zig
                        Data.Avro.JSON
                        Data.Avro.Schema.Decimal
                        Data.Avro.Schema.Deconflict
                        Data.Avro.Schema.ReadSchema
                        Data.Avro.Schema.Schema
  other-modules:
  hs-source-dirs:       src
  other-extensions:     OverloadedStrings
